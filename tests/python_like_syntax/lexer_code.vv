import lexer
import token

fn test_let_fn() {
	input := 'let five := 5
	let ten := 10
	let add : x -> y :=
		x + y
	let result := (add five ten)'

	tests := [
		token.Token{
			kind: token.Kind.key_let
			lit: 'let'
		},
		token.Token{
			kind: token.Kind.ident
			lit: 'five'
		},
		token.Token{
			kind: token.Kind.func_decl
			lit: ':='
		},
		token.Token{
			kind: token.Kind.number
			lit: '5'
		},
		token.Token{
			kind: token.Kind.lf
			lit: lexer.b_lf
		},
		token.Token{
			kind: token.Kind.key_let
			lit: 'let'
		},
		token.Token{
			kind: token.Kind.ident
			lit: 'ten'
		},
		token.Token{
			kind: token.Kind.func_decl
			lit: ':='
		},
		token.Token{
			kind: token.Kind.number
			lit: '10'
		},
		token.Token{
			kind: token.Kind.lf
			lit: lexer.b_lf
		},
		token.Token{
			kind: token.Kind.key_let
			lit: 'let'
		},
		token.Token{
			kind: token.Kind.ident
			lit: 'add'
		},
		token.Token{
			kind: token.Kind.colon
			lit: ':'
		},
		token.Token{
			kind: token.Kind.ident
			lit: 'x'
		},
		token.Token{
			kind: token.Kind.arrow
			lit: '->'
		},
		token.Token{
			kind: token.Kind.ident
			lit: 'y'
		},
		token.Token{
			kind: token.Kind.func_decl
			lit: ':='
		},
		token.Token{
			kind: token.Kind.lf
			lit: lexer.b_lf
		},
		token.Token{
			kind: token.Kind.tab
			lit: lexer.b_tab
		},
		token.Token{
			kind: token.Kind.ident
			lit: 'x'
		},
		token.Token{
			kind: token.Kind.plus
			lit: '+'
		},
		token.Token{
			kind: token.Kind.ident
			lit: 'y'
		},
		token.Token{
			kind: token.Kind.lf
			lit: lexer.b_lf
		},
		token.Token{
			kind: token.Kind.key_let
			lit: 'let'
		},
		token.Token{
			kind: token.Kind.ident
			lit: 'result'
		},
		token.Token{
			kind: token.Kind.func_decl
			lit: ':='
		},
		token.Token{
			kind: token.Kind.lparen
			lit: '('
		},
		token.Token{
			kind: token.Kind.ident
			lit: 'add'
		},
		token.Token {
			kind: token.Kind.space
			lit: ' '
		},
		token.Token{
			kind: token.Kind.ident
			lit: 'five'
		},
		token.Token {
			kind: token.Kind.space
			lit: ' '
		},
		token.Token{
			kind: token.Kind.ident
			lit: 'ten'
		},
		token.Token{
			kind: token.Kind.rparen
			lit: ')'
		},
		token.Token{
			kind: token.Kind.lf
			lit: lexer.b_lf
		},
	]

	mut lexer := lexer.new(input)

	for i, tt in tests {
		tok := lexer.next_tok()
		assert tok.kind == tt.kind && tok.lit == tt.lit
	}
}
